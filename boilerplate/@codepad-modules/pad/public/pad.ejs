<!doctype html>
<title>
    <%- file %>
</title>
<meta charset="utf-8" />

<link rel="stylesheet" href="/pad.css">
<link rel="stylesheet" href="/codemirror/lib/codemirror.css">
<link rel="stylesheet" href="/codemirror/addon/display/fullscreen.css">
<link rel="stylesheet" href="/codemirror/theme/<%- theme %>.css">

<script src="/codemirror/lib/codemirror.js"></script>
<script src="/codemirror/mode/xml/xml.js"></script>
<script src="/codemirror/mode/javascript/javascript.js"></script>
<script src="/codemirror/mode/css/css.js"></script>

<script src="/codemirror/mode/<%- mode %>/<%- mode %>.js"></script>
<script src="/codemirror/mode/htmlmixed/htmlmixed.js"></script>
<script src="/codemirror/mode/clike/clike.js"></script>
<script src="/codemirror/addon/display/fullscreen.js"></script>
<script src="/codemirror/addon/mode/overlay.js"></script>
<script src="/codemirror/addon/mode/multiplex.js"></script>

<!-- --- optional codemirror addons --- -->

<script src="/codemirror/addon/edit/matchbrackets.js"></script>
<script src="/codemirror/addon/selection/active-line.js"></script>

<link rel="stylesheet" href="/codemirror/addon/hint/show-hint.css">
<script src="/codemirror/addon/hint/show-hint.js"></script>
<script src="/codemirror/addon/hint/javascript-hint.js"></script>
<script src="/codemirror/addon/hint/html-hint.js"></script>
<script src="/codemirror/addon/hint/css-hint.js"></script>
<script src="/codemirror/addon/hint/xml-hint.js"></script>
<script src="/codemirror/addon/hint/anyword-hint.js"></script>
<script src="/codemirror/mode/markdown/markdown.js"></script>

<link rel="stylesheet" href="/codemirror/addon/lint/lint.css">
<script src="/codemirror/addon/lint/lint.js"></script>
<script src="/codemirror/addon/lint/javascript-lint.js"></script>
<script src="/codemirror/addon/lint/json-lint.js"></script>
<script src="/codemirror/addon/lint/css-lint.js"></script>
<script src="/htmlhint.js"></script>
<script src="/codemirror/addon/lint/htmlmixed-lint.js"></script>

<link rel="stylesheet" href="/codemirror/addon/dialog/dialog.css">
<link rel="stylesheet" href="/codemirror/addon/search/matchesonscrollbar.css">
<script src="/codemirror/addon/dialog/dialog.js"></script>
<script src="/codemirror/addon/search/searchcursor.js"></script>
<script src="/codemirror/addon/search/search.js"></script>
<script src="/codemirror/addon/scroll/annotatescrollbar.js"></script>
<script src="/codemirror/addon/search/matchesonscrollbar.js"></script>
<script src="/codemirror/addon/search/jump-to-line.js"></script>

<script src="/codemirror/addon/search/match-highlighter.js"></script>
<script src="/codemirror/addon/selection/mark-selection.js"></script>


<script src="/codemirror/mode/javascript/javascript.js"></script>
<script src="/codemirror/mode/css/css.js"></script>

<script src="/jshint.js"></script>
<script src="/jsonlint.js"></script>
<script src="/csslint.js"></script>

<!-- ------------------------------------ -->

<script src="/socket.io/socket.io.js" type="text/javascript"></script>

<script src="/ot/text-operation.js"></script>
<script src="/ot/selection.js"></script>
<script src="/ot/wrapped-operation.js"></script>
<script src="/ot/undo-manager.js"></script>
<script src="/ot/client.js"></script>
<script src="/ot/codemirror-adapter.js"></script>
<script src="/ot/socketio-adapter.js"></script>
<script src="/ot/editor-client.js"></script>

<!-- ------ -->



<textarea id="code" name="code" rows="5"></textarea>
<script>
                
    // get url query parameters
    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    var line = getParameterByName('line');
    var char = getParameterByName('char');

    var socket = io('/p');
    var pad = '/<%- file %>';
    
    var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
      	indentUnit: 4,
        lineNumbers: true,
        lineWrapping: true,
        theme: "<%- theme %>",
        fullScreen: true,
        mode: "<%- mode %>",
        // optional addons
        matchBrackets: true,
        //styleActiveLine: true,
        extraKeys: {
            "Ctrl-Space": "autocomplete"
        },
        gutters: ["CodeMirror-lint-markers"],
        lint: <%- lint_options %>,
        readOnly: <%- readonly %>,
        highlightSelectionMatches:  {showToken: /\w/, annotateScrollbar: true} // TODO: this does not work ...
    });


    editor.setOption("extraKeys", {
        F2: function(cm) {
            console.log("F2 handler", pad);

            socket.emit('beautify', pad, function(err, data) {
            	editor.setValue(data);
              	     socket.emit('typohint', pad, function(err, data) {
            	});
            });


        }
    });

    socket.on('reload', function() {
        location.reload();
    });
  
  	socket.on('typohint', function(typohint_array) {
      	console.log('typohint_array', typohint_array);
      	if (!<%- typohint %>) return console.log('typohint disabled');
      	for (let i in typohint_array) {
          	// we have the visual numbers in the array, and we need to use 0-indexed
      		let line = typohint_array[i].line-1;
          	let info = typohint_array[i].word + ' -> ' + Object.keys(typohint_array[i].wsdb).join(' | ');
          	let linestr = editor.getLine(line);
          	//console.log(line, typohint_array[i], linestr);
          	let startch = linestr.indexOf(typohint_array[i].word);
			editor.markText({line: line, ch: startch}, {line: line, ch: startch + (typohint_array[i].word.length) }, {className: "typohint", attributes: {title: info}});   
        };
    });
  
    socket.on('doc', function(data) {
        pad = data.pad;
        editor.setValue(data.str);
        const serverAdapter = new ot.SocketIOAdapter(socket);
        const editorAdapter = new ot.CodeMirrorAdapter(editor);
        const client = new ot.EditorClient(data.revision, data.clients, serverAdapter, editorAdapter);

        editor.focus();
        editor.setCursor({
            line: line - 1,
            ch: char
        });
      	
    });

    socket.on('err', function(data) {
      console.log('err', data);
      alert(data);
        editor.setOption('readOnly', true);
    });
  
    socket.on('getCursor', function(callback) {
        editor.focus();
        callback(editor.getCursor());
    });

    socket.on('setCursor', function(data) {
        editor.focus();
        editor.setCursor(data);
    });

    socket.on('disconnect', function() {
        console.log('socket disconnect', '<%- file %>');
        editor.setOption('readOnly', true);
      	// this will bug firefox !!!! but is necessery for chrome
        //location.reload();

        setTimeout(function(){ location.reload(); }, 1000);

    });
    
</script>